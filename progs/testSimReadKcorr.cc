#include "machdefs.h"
#include "sopnamsp.h"
#include <iostream>
#include <fstream>
#include <string>
#include <math.h>
#include <typeinfo>

// sophya libraries
//#include "histinit.h"
#include "fiosinit.h"
#include "mydefrg.h"
#include "tarray.h"
#include "ctimer.h"

// my classes
#include "sinterp.h"
#include "schechter.h"
#include "cosmocalcs.h"
#include "gftdist.h"
#include "simdata.h"

void usage(void);
void usage(void) {
	cout << endl<<" Usage: testSimReadKcorr [...options...]" << endl<<endl;
	cout << " -i INFILE: input filename of catalog generated by baseSimulation "<<endl;
	cout << " -o OUTFILE: filename to write stuff out to "<<endl;
	cout << " -z ZMIN,ZMAX,ZRES: redshift grid k-correction calculated on [DEFAULT=0,3,500]"<<endl;
	cout << " -e EMAX,ERES: extinction grid k-correction calculated on [DEFAULT=0.3,20]"<<endl;
	cout << " -y : NYEARS: number of years of LSST observations [DEFAULT=10]"<<endl;
	cout << " -r : Don't add host galaxy reddening"<<endl;
	cout << " -m : Don't include Madau absorption "<<endl;
	cout << endl;
    }
    
int main(int narg, char* arg[]) {

    cout << " ==== testSimReadKcorr.cc program ==== "<<endl;

	// make sure SOPHYA modules are initialized 
	SophyaInit();  
	FitsIOServerInit();
	cout<<endl<<endl;

	//--- decoding command line arguments 
    string infile;
    string outfile = "testfiles/testSimReadKcorr.fits";
    // Definition of k-correction grid to read in
	double zmin=0., zmax=3., emax=0.3;
    int zres = 500, eres = 20; 
    int nYear = 10;
    bool isMadau = true;
    bool isRedden = true;
    
    // Number of visits per year (Table 1, Ivezic et al 2008)
    int uVisitsPerYear = 6;
    int gVisitsPerYear = 8;
    int rVisitsPerYear = 18;
    int iVisitsPerYear = 18;
    int zVisitsPerYear = 16;
    int yVisitsPerYear = 16;
    
    // Not currently optional, but could be
	string sedLib="CWWK";    // SED set to use
	int nSED;                // Number SEDs in above SED library
	int nElliptical = 1;     // Number of ellipticals in above SED library
    int nSpiral = 2;         // Number of spirals in above SED library
	string filtSet = "LSST"; // Filter set to use
	int nFilter = 6;         // Number of filters in above filter set
	string restFrameFilt = "GOODSB";// Rest frame filter absolute mag is defined in
	// Filter labels
	int iU = 0, iG = 1, iR = 2, iI = 3, iZ = 4, iY = 5;
	
    
	//--- decoding command line arguments 
	cout << " ==== decoding command line arguments ===="<<endl;
	char c;
	while((c = getopt(narg,arg,"hrmi:o:z:e:y:")) != -1) {
	    switch (c) {
	        case 'i' :
                infile = optarg;
                break;
            case 'o' :
                outfile = optarg;
                break;
            case 'z' :
                sscanf(optarg,"%lf,%lf,%d",&zmin,&zmax,&zres);
                break;
            case 'e' :
                sscanf(optarg,"%lf,%d",&emax,&eres);
                break;
            case 'y' :
                sscanf(optarg,"%d",&nYear);
                break;
            case 'r' :
                isRedden = false;
                break;
            case 'm' :
                isMadau = false;
                break;
            case 'h' :
                default :
                usage(); return -1;
		    }
        }
        
    // total number of visits
	int uVisits = uVisitsPerYear*nYear;
    int gVisits = gVisitsPerYear*nYear;
    int rVisits = rVisitsPerYear*nYear;
    int iVisits = iVisitsPerYear*nYear;
    int zVisits = zVisitsPerYear*nYear;
    int yVisits = yVisitsPerYear*nYear;

    //-- end command line arguments
    cout <<"     Reading from base simulation "<< infile <<endl;
    cout <<"     Writing to file(s) beginning "<< outfile <<endl;
    cout <<"     Redshift grid k-correction calculated on: "<< zmin<<" to "<< zmax;
    cout <<" in steps of "<< zres << endl;
    cout <<"     Extinction grid k-correction calculated on: 0 to "<< emax;
    cout <<" in steps of "<< eres <<endl;
    cout <<"     Simulating for "<< nYear <<" years of operations "<<endl;
    if (!isMadau)
        cout <<"     NOT simulating Madau absorption "<<endl;
    if (!isRedden)
        cout <<"     NOT simulating host galaxy reddening"<<endl;
    cout << endl;
  
    int rc = 1;  
    try {  // exception handling try bloc at top level
  
    ifstream inp;
	ofstream outp;
	
	// For timing stuff
	Timer tm("timer",false);
	
	// this controls the drawing of random numbers
	RandomGenerator rg;
	
	// Read in catalog generated by baseSimulation
	// Contains basic galaxy properties: redshift, absolute magnitude, 
	// broad type (elliptical, spiral, starburst), 
	FitsInOutFile fin(infile,FitsInOutFile::Fits_RO);
	fin.MoveAbsToHDU(2);
	SwFitsDataTable dt(fin,512,false);
	sa_size_t ng=dt.NEntry();
	sa_size_t nc=dt.NCols();
	DataTableRow row=dt.EmptyRow();
	cout <<"     In file "<<infile<<" ... "<<endl;
	cout <<"     Number of columns = "<<nc<<", number of entries = "<<ng;
	cout << endl;

	// Output file
	cout <<"     Creating output catalog "<<outfile<<endl;
	FitsInOutFile swf(outfile,FitsInOutFile::Fits_Create);
	
	// binary data table
	SwFitsDataTable gals(swf,2048);
	gals.AddFloatColumn("zs");
	gals.AddFloatColumn("am");
	gals.AddFloatColumn("type");
	gals.AddFloatColumn("ext");
	gals.AddFloatColumn("mu");
	gals.AddFloatColumn("mg");
	gals.AddFloatColumn("mr");
	gals.AddFloatColumn("mi");
	gals.AddFloatColumn("mz");
	gals.AddFloatColumn("my");
	gals.AddFloatColumn("muo");
	gals.AddFloatColumn("mgo");
	gals.AddFloatColumn("mro");
	gals.AddFloatColumn("mio");
	gals.AddFloatColumn("mzo");
	gals.AddFloatColumn("myo");
	gals.AddFloatColumn("emu");
	gals.AddFloatColumn("emg");
	gals.AddFloatColumn("emr");
	gals.AddFloatColumn("emi");
	gals.AddFloatColumn("emz");
	gals.AddFloatColumn("emy");
	DataTableRow rowin=gals.EmptyRow();
	cout << endl;
	
	// Set cosmology
	double h=0.7, OmegaM=0.3, OmegaL=0.7;
	SimpleUniverse su(h,OmegaM,OmegaL);
	su.SetFlatUniverse_OmegaMatter();
	cout <<"     Set cosmology to: OmegaM="<<OmegaM<<", OmegaL="<<OmegaL;
	cout <<", H0="<<100*h<<endl;
	cout << endl;
	
	// Get k-correction tables
    ReadKCorrections readK(sedLib, filtSet, restFrameFilt, zmin, zmax, zres, emax, eres, isMadau);
    readK.readInterpZExt(nSED, nFilter);
    vector<SInterp2D*> kInterpZExt = readK.returnkInterpZExt();
    cout <<"     kInterpZExt.size()="<< kInterpZExt.size() << endl;
        
	// Prepare the class which will calculate the magnitudes
	cout <<"     Initialize class to calculate magnitudes"<<endl;
	SimData simgal(su, rg, kInterpZExt, nFilter, nElliptical, nSpiral);
	simgal.setMadau(isMadau);
            

    // Start loop
	for (int i=0; i<ng; i++) {
	
		cout <<"     gal "<<i+1<<" of "<<ng<<endl;
		dt.GetRow(i,row);
		
		// Get galaxy properties: galaxy has redshift zs, absolute magnitude am,
		// SED type type and internal extinction ext.
		double zs=row[0];
		double am=row[1];
		int typ=(int)row[2];
		double type=simgal.SimSED(typ);
		double ext;
		if (isRedden)
		    ext = simgal.SimRed(type);
		else
		    ext = 0.;

        // Calculate galaxy magnitude in observed filters ugrizy
        // Galaxy's absolute magnitude is defined in filter (*goodsBFilter[0])
		double uMagTh=simgal.GetMag(zs,type,am,ext,iU);
		double gMagTh=simgal.GetMag(zs,type,am,ext,iG);
		double rMagTh=simgal.GetMag(zs,type,am,ext,iR);
		double iMagTh=simgal.GetMag(zs,type,am,ext,iI);
		double zMagTh=simgal.GetMag(zs,type,am,ext,iZ);
		double yMagTh=simgal.GetMag(zs,type,am,ext,iY);
		
		// The final observations
		// The 1st element is the value of the observed magnitude
		// The 2nd element is the magnitude error
		vector<double> uObservation = simgal.addLSSTuError(uMagTh,uVisits);
		vector<double> gObservation = simgal.addLSSTgError(gMagTh,gVisits);
		vector<double> rObservation = simgal.addLSSTrError(rMagTh,rVisits);
		vector<double> iObservation = simgal.addLSSTiError(iMagTh,iVisits);
		vector<double> zObservation = simgal.addLSSTzError(zMagTh,zVisits);
        vector<double> yObservation = simgal.addLSSTyError(yMagTh,yVisits);

        // Write the data to the FITS file
		rowin[0]=zs;
		rowin[1]=am;
		rowin[2]=type;
		rowin[3]=ext;
		rowin[4]=uMagTh;
		rowin[5]=gMagTh;
		rowin[6]=rMagTh;
		rowin[7]=iMagTh;
		rowin[8]=zMagTh;
		rowin[9]=yMagTh;
		rowin[10]=uObservation[0];
		rowin[11]=gObservation[0];
		rowin[12]=rObservation[0];
		rowin[13]=iObservation[0];
		rowin[14]=zObservation[0];
		rowin[15]=yObservation[0];
		rowin[16]=uObservation[1];
		rowin[17]=gObservation[1];
		rowin[18]=rObservation[1];
		rowin[19]=iObservation[1];
		rowin[20]=zObservation[1];
		rowin[21]=yObservation[1];
		gals.AddRow(rowin);
		}
	cout <<"     End loop"<<endl;
	tm.Split();
	cout <<"     .... done, took "<< tm.PartialElapsedTime()/60 <<" mins";
	
	// Write information on simulation to FITS header
	DVList  dvl;
    dvl("BaseSim") = infile;
	dvl("SedLib") = sedLib;
	dvl("NEllip") = nElliptical;
	dvl("NSpiral") = nSpiral;
	dvl("NYearObs") = nYear;
	swf.WriteHeaderRecords(dvl);
	swf.MoveAbsToHDU(2);


    
	}  // End of try bloc 
   
  
  catch (PThrowable & exc) {  // catching SOPHYA exceptions
    cerr << " testSimReadKcorr.cc: Catched Exception (PThrowable)" 
	 << (string)typeid(exc).name() 
         << "\n...exc.Msg= " << exc.Msg() << endl;
    rc = 99;
  }
  catch (std::exception & e) {  // catching standard C++ exceptions
    cerr << " testSimReadKcorr.cc: Catched std::exception "  << " - what()= " 
	 << e.what() << endl;
    rc = 98;
  }
  catch (...) {  // catching other exceptions
    cerr << " testSimReadKcorr.cc: some other exception (...) was caught ! " 
	 << endl;
    rc = 97;
  }
  cout << " ==== End of testSimReadKcorr.cc program  Rc= " << rc << endl;
  return rc;	
}

