/*!
\page overdens How to simulate a grid of over-densities

Below are the usage instructions

<CODE>Usage: simdensity [...options...]<BR>
  -a : auto init random seed (needed for multiple simul)<BR>
  -0 : use ComputeFourier0 method (defaut: no, use normal way)<BR>
  -G typevol: compute Pk(z=0) and apply growth factor in real space<BR>
        typevol=1 evolved with distance / observer (def)<BR>
        typevol=2 evolved with distance to middle of Z planes<BR>
        else : no evol, spectrum Pk(z=z_median) for all cube (def)<BR>
  -F : filter spectrum by pixel shape (0=no 1=yes(default)<BR>
  -x nx,dx : size along x axis (npix,Mpc)<BR>
  -y ny,dy : size along y axis (npix,Mpc)<BR>
             if ny or dy <=0 take same value as for x<BR>
  -z nz,dz : size along z axis (redshift axis, npix,Mpc)<BR>
  -Z zref : redshift for the center of the simulation cube<BR>
  -2 : compute also 2D spectrum (default: no)<BR>
  -8 sigmaR,R : normalisation of power spectrum, R in Mpc<BR>
                (default sigmaR=1, R=8/h100 Mpc)<BR>
  -W : write cube in FITS format (complex cube is coded as real cube)<BR>
  -P : write cube in PPF format<BR>
  -O a,b : tell what you want to write (with the -W and -P options)<BR>
               a=1 : write generated fourier cube (_k0)<BR>
               b=1 : write real space cube dRho/Rho at z (_r0)<BR>
  -S : write cube slices in PPF format<BR>
  -o root_name_out : root string for output file name (def: simdensity)<BR>
  -T nth : number of threads (if compiled multi-thread, default: 0)</CODE><BR>

*/
